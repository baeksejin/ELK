elk 실행 확인
http://localhost:9200/

키바나 실행 확인
http://localhost:5601/

1. INDEX 만들기
PUT classes

2. INDEX 조회
GET classes

3. INDEX 삭제
DELETE classes

4. 문서 생성 : [표현법] POST/인덱스명/_doc/id
POST classes/_doc/1
{
  "name":"gildong",
  "msg":"hello"
}

5. 문서 생성 확인
GET classes/_doc/1

6. id를 넣지 않고 생성 : id를 자동으로 생성 ( 문자 + 숫자 )
POST classes/_doc
{
  "name":"sejin",
  "msg":"newMsg"
}

7. 문서에 필드 추가(만약 기존에 있는 필드이면 값만 업데이트)
   [표현법] POST/인덱스명/_update/id
          {
            "doc:{
              키 : 값
            }
          }

  POST classes/_update/1
  {
    "doc":{
      "msg":"안녕"
    }
  }

  POST classes/_update/1
  {
    "doc":{
      "num1": 1
    }
  }

8.script를 이용한 값 변경
POST classes/_update/1
{
  "script":{
    "source" : "ctx._source.num1 += params.value",
    "params" : {
      "value" : 3
    }
  }
}

9. _bulk : 한꺼번에 많은 items를 넣을 때
POST _bulk
{"index":{"_index":"itest", "_id":"1"}}
{"msg":"안녕", "name":"kim", "age":20}
{"index":{"_index":"itest", "_id":"2"}}
{"msg":"그래", "name":"lee", "age":21}
{"index":{"_index":"itest", "_id":"3"}}
{"msg":"반가워", "name":"park", "age":22}

-> 파일로 index를 만들 때 
POST _bulk

10. 본문 데이터 검색
- term : 완전일치 검색
GET basketball/_search
{
  "query" : {
    "term" : {
      "points":32
    }
  }
}

- match : 단어가 포함되어있으면 검색
GET basketball/_search
{
  "query" : {
    "match" : {
      "team":"states"
    }
  }
}

+ match에서 공백은 or를 의미 
GET basketball/_search
{
  "query" : {
    "match" : {
      "team":"states jazz"
    }
  }
}

+ match에서 and로 검색 : 공백 중간이나 앞, 뒤에 다른 단어가 와도 된다. 
GET basketball/_search
{
  "query" : {
    "match" : {
      "team":{
        "query" : "states jazz",
        "operator" : "and"
      }
    }
  }
}

- match_phrase : 제시한 검색어는 정확히 일치, 앞이나 뒤에 다른 단어가 와도 된다. 
GET basketball/_search
{
  "query" : {
    "match_phrase" : {
      "team": "States Warriors"
    }
  }
}

-> slop 옵션 : 값의 공백사이의 단어가 n개 이하의 단어가 들어와도 됨 
GET basketball/_search
{
  "query" : {
    "match_phrase" : {
      "team": {
        "query":"States Warriors",
        "slop":1
      }
    }
  }
}

- query_string : 여러 개의 검색 사용가능
GET basketball/_search{
    "query":{
        "query_string":{
            "default_field":"team", 
            "query": "(Golden AND jazz) OR \"Golden Warriors\""
        }
    }
}

- Bool query : 여러 쿼리를 조합하여 사용 가능 
               4개의 인자를 가지고 있음
        - must : 쿼리가 참인 문서들을 검색
        - must_not : 쿼리가 거짓인 문서들을 검색
        - should : 검색 결과 중 이 쿼리에 해당하는 문서들의 score를 높여줌
        - filter : 쿼리가 참인 문서를 검색하지만, score를 계산하지 않음
                   must보다 검색 속도가 빠르다
 
 [사용법]
 GET 인덱스명/_search
 {
    "query":{
        "bool":{
            "must":[
                { 쿼리 }, ... 
            ],
            "must_not":[
            { 쿼리 }, ...
            ],
            "should":[
                { 쿼리 }, ...
            ],
            "filter":[
                { 쿼리 }, ...
            ]
        }
    }
 }

 GET basketball/_search
 {
    "query":{
        "bool":{
            "must": [
                {"match" : {"team" : "jazz"}},
                {"match_phrase" : {"team" : "Golden States"}}
            ]
        }
    }
 }

 -> Golden States 사이의 1개의 단어가 들어오는것은 허용
  GET basketball/_search
    {
      "query":{
        "bool":{
          "must": [
            {"match": {"team":"Jazz"}}, 
            {"match_phrase":{
              "team": {
                  "query" : "Golden States",
                  "slop":1
                }
              }
            }
          ]
        }
      }
    } 
 
   -> Jazz 있고, Golden States 없는
  GET basketball/_search
    {
      "query":{
        "bool":{
          "must": [
            {"match": {"team":"Jazz"}}
          ],
          "must_not": [
            {"match_phrase": {"team" : "Golden States"}}
          ]
        }
      }
    } 
 
 -> should : 검색 점수 조정을 위해 사용 ( 가중치를 주어 상위로 올리기 )
 GET basketball/_search
 {
  "query":{
    "match":{
      "team":"jazz"
    }
  }
 }

 GET basketball/_search
 {
  "query":{
    "bool":{
      "must":[{
        "match":{"team":"jazz"}
      }],
      "should":[{
        "match":{"team":"Golden"}
      }]
    }
  }
} 

GET basketball/_search
 {
  "query":{
    "bool":{
      "must":[{
        "match":{"team":"jazz"}
      }],
      "should":[{
        "match":{"team":"Golden"}
      }]
    }
  }
} 

-> filter : score에 영향을 주지 않고 검색
-> jazz로만 검색한 것과 같은 score를 가짐
GET basketball/_search
 {
  "query":{
    "bool":{
      "must":[
      {
        "match":{"team":"jazz"}
      }],
      "filter":[
       {
        "match":{"team":"Golden"} 
       }
      ]
    }
  }
} 

-> Range query : 숫자나 날짜 형식의 범위를 검색
  - gte : ~ 이상
  - gt : ~ 초과
  - lte : ~ 이하
  - lt : ~ 미만

-> points가 10~19 사이 검색
GET basketball/_search
{
  "query":{
    "range":{
      "points":{
        "gte":10, 
        "lt":20
      }
    }
  }
}

-> date에서 2023년도 검색 값
GET basketball/_search
{
  "query":{
    "range":{
      "submit_date":{
        "gte" : "2023-01-01",
        "lte" : "2023-12-31"
      }
    }
  }
}

11. 데이터 색인 : 역인덱스 ( 단어 → 매핑문서 )

→ tokenizer filter : 항목의 값으로 입력
GET _analyze
{
  "text":"Today is a day where I feel lucky and happy",
  "tokenizer":"whitespace", 
  "filter":[
    "lowercase",  // 소문자로 변환
    "stop",       // 불용어 제외
    "snowball"    // 단어의 원형
  ]
}

-> filter에 넣은 순서대로 적용됨
GET _analyze
{
  "text":"Today Is A day where I feel lucky and happy",
  "tokenizer":"whitespace", 
  "filter":[ 
    "stop", 
    "lowercase",      
    "snowball"    
  ]
}

-> index의 구조 만들기
PUT t_index 
{
  "mappings:{
    "properties":{
      "msg":{
        "type":"text",
        "analyzer":"snowball"
      }
    }
  }
}

// happy검색됨
GET t_index/_search 
{
  "query" : {
    "match" : {
      "msg":"happy"
    }
  }
}

// 원형으로 들어가기 때문에 happi로 저장됨
// term으로 검색하면 happy는 검색 안됨
GET t_index/_search 
{
  "query" : {
    "term" : {
      "msg":"happi"
    }
  }
}

-> 사용자 정의 토큰 필터 만들기
PUT t_index2
{
  "settings":{
    "index":{
      "analysis":{
        "analyzer":{
          "my_custom_analyzer":{
            "type":"custom",
            "tokenizer":"whitespace",
            "filter":[
              "lowercase",
              "my_stop_filter",
              "snowball"
            ]
          }
        },
        "filter":{
          "my_stop_filter":{
            "type":"stop",
            "stopwords":[
              "feel"
            ]
          }
        }
      }
    }
  }
}

GET t_index2/_analyze
{
  "analyzer":"my_custom_analyzer",
  "text":["Today Is A day where I feel lucky and happy"]
}

-> _termvectors : term의 분석에 대한 자세한 정보보기
GET t_index2/_termvectors/1?fields=msg

* 한글 형태소 분석기 설치
elasticsearch-plugin install analysis-nori


-> 기본 토큰
GET _analyze
{
  "analyzer":"standard",
  "text":["동해물과 백두산이"]
}


-> nori 토큰
GET _analyze
{
  "analyzer":"nori",
  "text":["동해물과 백두산이"]
}

PUT my_nori
{
  "settings":{
    "analysis":{
      "tokenizer":{
        "my_nori_token":{
          "type":"nori_tokenizer",
          "user_dictionary_rules":[
            "해물"
          ]
        }
      }
    }
  }
}

사용자 등록 토큰
GET my_nori/_analyze
{
  "tokenizer":"my_nori_token",
  "text":["동해물과 백두산이"]
}


-> 합성어(복합어) 처리 3가지 옵션
- none : 복합어를 분리하지 않음
- discard : 복합어 분리
- mixed : none과 discard 모두 저장

PUT my_nori2
{
  "settings":{
    "analysis":{
      "tokenizer":{
        "nori_none":{
          "type":"nori_tokenizer",
          "discompound_mode":"none"
        }, 
        "nori_discard":{
          "type":"nori_tokenizer",
          "discompound_mode":"discard"
        },
        "nori_mixed":{
          "type":"nori_tokenizer",
          "discompound_mode":"mixed"
        }
      }
    }
  }
}


GET my_nori2/_analyze
{
  "tokenizer":"nori_none",
  "text":["동해물과 백두산이"]
}

- stoptags : 한글 품사 중 제외시킬 품사

디폴트 값 = 
"stoptags": [
  "E", "IC", "J", "MAG", "MAJ",
  "MM", "SP", "SSC", "SSO", "SC",
  "SE", "XPN", "XSA", "XSN", "XSV",
  "UNA", "NA", "VSV"
]

-> my_stoptag인덱스에서 수사( NR )를 제외
PUT my_stoptag
{
  "settings":{
    "index":{
      "analysis":{
        "filter":{
          "my_stop_tag":{
            "type":"nori_part_of_speech",
            "stoptags":["NR"]
          }
        }
      }
    }
  }
}

-> 
GET my_stoptag/_analyze
{
  "tokenizer":"nori_tokenizer",
  "filter":["my_stop_tag"],
  "text":"일곱난장이들의 나들이"
}

-> nori_readingform : 한자를 한글로 바꾸어 저장
GET _analyze
{
  "tokenizer":"nori_tokenizer",
  "filter":["nori_readingform"],
  "text":"立春大吉"
}

-> explain : 품사정보를 같이 볼 수 잇다.
GET _analyze
{
  "tokenizer":"nori_tokenizer", 
  "text":["동해물과 백두산이"],
  "explain":true
}




// 인덱스 settings 부사를 제외시키는 put 만들기 -> 테스트
PUT my_stoptag2
{
  "settings":{
    "index":{
      "analysis":{
        "filter":{
          "my_stop_tag":{
            "type":"nori_part_of_speech",
            "stoptags":["MA"]
          }
        }
      }
    }
  }
}

// 인덱스 settings rules만들기 -> 테스트
PUT my_nori3
{
  "settings":{
    "analysis":{
      "tokenizer":{
        "nori_none":{
          "type":"nori_tokenizer",
          "discompound_mode":"none"
        }, 
        "nori_discard":{
          "type":"nori_tokenizer",
          "discompound_mode":"discard"
        },
        "nori_mixed":{
          "type":"nori_tokenizer",
          "discompound_mode":"mixed"
        }
      }
    }
  }
}

GET my_nori3/_analyze
{
  "tokenizer":"nori_none",
  "text":["강판으로 갈아만든 감자전이 최고 맛도리"]
}



// 인덱스 basketball에서 2024년도 정보 검색해오기
GET basketball/_search
{
  "query":{
    "range":{
      "submit_date":{
        "gte" : "2024-01-01",
        "lte" : "2024-12-31"
      }
    }
  }
}

// 인덱스 basketball에서 rebounds 3이상인 것 모두 검색
GET basketball/_search
{
  "query":{
    "range":{
      "rebounds":{
        "gte" : 3
      }
    }
  }
}

12. mapping(=스키마) : 자동으로 생성됨. 너무 많은 정보를 담고 있다.

PUT books/_doc/1
{
  "title":"Romeo and Juliet",
  "author":"William Shakespeare",
  "category":"Tragedies",
  "publish_date" : "1597-03-12T00:00:00", 
  "page":200
}

-> 전체 구조 확인
GET books 

-> 전체 구조 중 mappings의 값만 보기
GET books/_mapping

- mapping의 정의
: 기존의 mapping에 추가는 가능하지만, 바꾸지는 못한다. 
[표현법]
PUT 인덱스명/_mapping
{
  "properties":{
    "추가할 필드명":{
      "type":"필드 타입"
    }
  }
}

-> 기존의 books에 삽입
PUT books/_mapping
{
  "properties":{
    "content":{
      "type":"text"
    }
  }  
}

-> 소문자도 검색됨
GET books/_search
{
  "query":{
    "match":{
      "title":"Romeo
    }
  }
}

-> title.keyword로 검색하면 대소문자 가림
GET books/_search
{
  "query":{
    "match":{
      "title.keyword":"Romeo"
    }
  }
}

DELETE books

PUT books {
 "mappings": {
    "properties": {
      "author": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "category": {
        "type": "keyword",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "content": {
        "type": "text"
      },
      "page": {
        "type": "integer"
      },
      "publish_date": {
        "type": "date"
      },
      "title": {
        "type": "text" 
      }
    }
  }
}

-> Multi filed : "fields" 항목에 다시 새로운 필드를 정의하고 설정
DELETE books

PUT books {
 "mappings": {
    "properties": {
      "author": {
        "type": "text",
        "fields": {
          "fullname": {
            "type": "keyword",
            "ignore_above": 256
          },
          "nori":{
            "type":"text"
            "analyzer":"nori"
          }
        }
      },
      "category": {
        "type": "keyword",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "content": {
        "type": "text"
      },
      "page": {
        "type": "integer"
      },
      "publish_date": {
        "type": "date"
      },
      "title": {
        "type": "text",
        "fields": {
          "fullname": {
            "type": "keyword",
            "ignore_above": 256
          },
          "nori":{
            "type":"text"
            "analyzer":"nori"
          }
        }
      }
   }
  }
}

-> 숫자타입 : java의 타입과 동일 추가로 
  - half_float : 2byte
  - scaled_float : long 형태로 저장, 옵션으로 소수점 위치를 지정.

  mapping에 integer로 해놓고, 실수형을 넣으면 보여줄 때는 실수형을 보여주지만
  실제 저장은 long형으로 저장된다.

  PUT num_index
  {
    "mappings":{
      "properties":{
        "value":{
          "type":"integer"
        }
      }
    }
  }

  PUT num_index/_doc/1
  {
    "value":1
  }

  PUT num_index/_doc/2
  {
    "value":"2"
  }

  PUT num_index/_doc/3
  {
    "value":3.4
  }

GET num_index/_search
  {
    "query": {
      "range": {
        "value": {
          "gte": 0.5,
          "lte": 3
        }
      }
    }
  }

-> coerce 옵션 : 지정한 타입 외에 받을지 안받을지 선택
PUT num_index2
  {
    "mappings":{
      "properties":{
        "value":{
          "type":"integer",
          "coerce":false
        }
      }
    }
  }

  PUT num_index2/_doc/1
{
  "value":1
}

PUT num_index2/_doc/2
{
  "value":"2"
}

PUT num_index2/_doc/3
{
  "value":3.4
}


-> date : ISO8601형식을 따름. 이외에 다른 형식은 text로 인식
PUT date_index/_doc/1
{
  "date":"2024-03-12T16:45:30"   // type: date
}

GET date_index

PUT date_index2/_doc/1
{
  "date":"12/mar/2024:16:45:30" // type : text
}

-> mapping 미리 정의
PUT date_index3 
{
  "mappings":{
    "properties":{
      "date":{
        "type":"date",
        "format":"dd/MMM/yyyy:HH:mm:ss"
      }
    } 
  }
}

PUT date_index3/_doc/1
{
  "date":"12/mar/2024:16:45:30"  
} 


PUT date_index3 
{
  "mappings":{
    "properties":{
      "date":{
        "type":"date",
        "format":"dd/MMM/yyyy:HH:mm:ss || epoch_millis || yyyy-MM-dd"
      }
    } 
  }
}

-> object
PUT movies/_doc/1
{
  "movie":{
    "name":"Iron Man",
    "side":"superhero"
  }
}

GET movies/_mapping

GET movies/_search
{
  "query":{
    "match":{
      "movie.name":"man"
    }
  }
}

PUT movies/_doc/2
{
  "title":"The Avengers",
  "movie":[
    {
      "name":"Iron Man",
      "side":"superhero"
    },
    {
      "name":"Loki",
      "side":"villain"
    },
    {
      "name":"Spider Man",
      "side":"superhero"
    },
  ]
}

PUT movies/_doc/3
{
  "title":"Avengers : Infinity War",
  "movie":[ 
    {
      "name":"Loki",
      "side":"superhero"
    },
    {
      "name":"Thanos",
       "side":"villain"
    }
  ]
}

-> name은 Loki이고, side는 villain인 문서를 검색
* 결과 2개의 문서를 검색 
GET movies/_search
{
  "query":{
    "bool":{
      "must":[{
        "match":{
          "movie.name":"Loki"
        }
      },
      {
        "match":{
          "movie.side":"villain"
        }
      }
      ]
    }
  }
}

-> 내가 원하는 결과 1개의 문서 검색
* nested : 내부에 있는 object값들을 서로 다른 역색인을 만든다.

PUT movies2 
{
  "mappings":{
    "properties":{
      "movie":{
        "type":"nested",
        "properties":{
          "name":{
            "type":"text"
          },
          "side":{
            "type":"keyword"
          }
        }
      }
    }
  }
}

GET movies/_search
{
  "query":{
    "nested" : {
      "path":"movie",
      "query":{
        "bool":{
          "must":[
            {
              "match":{
                "movie.name":"Loki"
              }
            },
            {
              "match":{
                "movie.side":"villain"
              }
            }
          ]
        }
      }
    } 
  }
}

-> Geo : 위치정보
PUT geo_index/_doc/1
{
  "location":{
    "lat":42.35548,
    "lon":3.46534
  }
}

GET geo_index/_mapping

-> geo_point 지정
PUT geo_index2
{
  "mappings":{
    "properties":{
      "locatin":{
        "type":"geo_point"
      }
    }
  }
}


PUT geo_index2/_doc/1
{
  "location":{
    "lat":42.35548,
    "lon":3.46534
  }
}

PUT geo_index3
{
  "mappings":{
    "properties":{
      "locatin":{
        "type":"geo_point"
      }
    }
  }
}

put geo_index3/_bulk 
  {"index":{"_id":"1"}}
  {"station":"강남","location":{"lon":127.027926,"lat":37.497175},"line":"2호선"}
  {"index":{"_id":"2"}}
  {"station":"종로3가","location":{"lon":126.991806,"lat":37.571607},"line":"3호선"}
  {"index":{"_id":"3"}}
  {"station":"여의도","location":{"lon":126.924191,"lat":37.521624},"line":"5호선"}
  {"index":{"_id":"4"}}
  {"station":"서울역","location":{"lon":126.972559,"lat":37.554648},"line":"1호선"} 


-> geo_bounding_box 검색 : 사각형 박스 안에 들어온 위치 검색
GET geo_index3/_search
{
  "query":{
    "geo_bounding_box":{
      "location":{
        "bottom_right":{
          "lat":37.5555,
          "lon":127.02222
        }, 
        "top_left":{
          "lat":37.58888,
          "lon":126.9888
        }
      }
    }
  }
}

-> geo_distance 검색 : 포인트와 거리를 주면 거리가 반지름으로 원형을 만들어 그 원 안의 위치검색
GET geo_index3/_search
{
  "query":{
    "geo_distance":{
      "distance":"5km",
      "location":{
        "lat":37.53333,
        "lon":126.966666
      }
    }
  }
}

"location":"24.23123, 423.2345"
"location":["24.23123, 423.2345"]

-> geo_shape : 여러 개의 포인터를 연결하여 면 안에 들어오는 위치 검색

13. Aggregations : 집계
- Metrics Aggregations : 산술 min, max, sum, Avg

POST ball_index/_bulk
{ "index" : {"_id" : "1" } }
{"team" : "Golden States Warriors","name" : "Stephen Curry", "points" : 30,"rebounds" : 3,"assists" : 4, "blocks" : 5, "submit_date" : "2024-10-11"}
{ "index" : {"_id" : "2" } }
{"team" : "Golden States Warriors","name" : "Stephen Curry","points" : 20,"rebounds" : 5,"assists" : 8, "blocks" : 5, "submit_date" : "2024-10-13"}

-> Avg
GET ball_index/_search
{
  "size":0,
  "aggs":{
    "avg_score":{
      "avg":{
        "field":"points"
      }
    }
  }
}

-> max
GET ball_index/_search
{
  "size":0,
  "aggs":{
    "max_score":{
      "max":{
        "field":"points"
      }
    }
  }
}

GET ball_index/_search
{
  "size":0,
  "aggs":{
    "min_score":{
      "min":{
        "field":"points"
      }
    }
  }
}

GET ball_index/_search
{
  "size":0,
  "aggs":{
    "sum_score":{
      "sum":{
        "field":"points"
      }
    }
  }
}

GET ball_index/_search
{
  "size":0,
  "aggs":{
    "stats_score":{
      "stats":{
        "field":"points"
      }
    }
  }
}

-> Bucket Aggregations : 그룹
GET basketball2/_search
{
  "size":0,
  "aggs":{
    "player":{
      "terms":{
        "field":"team"
      }
    }
  }
}

-> 팀별로 합계, 평균...
GET basketball2/_search
{
  "size":0,
  "aggs":{
    "team_stats":{
      "terms":{
        "field":"team.keyword"
      },
      "aggs":{
        "stats_score":{
          "stats":{
            "field":"points"
          }
        }
      }
    }
  }
}

-> 전체 인덱스 검색
GET _cat/indices?v

==============================================================================

logstash

* 실행기본
input {
  stdin{}
}
filter {


}
ouput {
  stdout{}
}

cmd에서 실행시
~~~~ \logstash-8.12.2\bin>logstash -e "input{stdin{}} output{stdout{}}"

-tcp에서 보낸 파라미터 콘솔에 출력하기
  파일 생성 위치 : ~~~~ \logstash-8.12.2\log_test01.conf
  실행 : ~~~~ \logstash-8.12.2\bin\logstash -f log_test01.conf

- 세계인구 파일을 가공하여 엘라스틱서치에 보내기
  config파일 :  ~~~~ \logstash-8.12.2\log_population.conf
  실행 : ~~~~ \logstash-8.12.2\bin\logstash -f log_population.conf

  ** elasticsearch에 넣기 전에 편하게 가공이 필요
  - mutate filter :  특정 필드를 가공해줌
    옵션
    - convert : 형변환
    - copy : 값 복사
    - gsub : 정규식에 일치하는 항목을 다른 문자열로 대체
    - join : 배열을 하나로 합침
    - split : 문자를 배열로 나눔
    - lowercase, uppercase
    - capitalize : 첫글자만 대문자로
    - merge : 필드 값들을 다른 필드에 포함
    - coerce : 값이 null일 때 넣을 기본 값 설정
    - update : 값을 업데이트 
    - strip : 좌우공백 제거 
    - rename : 필드 이름 변경
















curl -H "Content-Type : application/json" -Xpost localhost:9200/classes/_doc/2 -d "{""name"":""newName"", ""msg"":""kkk""}"

